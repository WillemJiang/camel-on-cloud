/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package com.example.customerservice.server;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import com.example.customerservice.CustomerService;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2019-07-03T09:56:09.248+08:00
 * Generated source version: 3.2.7
 * 
 */
@WebServiceClient(name = "CustomerServiceImplService", 
                  wsdlLocation = "http://localhost:9090/CustomerServicePort?wsdl",
                  targetNamespace = "http://server.customerservice.example.com/") 
public class CustomerServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://server.customerservice.example.com/", "CustomerServiceImplService");
    public final static QName CustomerServiceImplPort = new QName("http://server.customerservice.example.com/", "CustomerServiceImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:9090/CustomerServicePort?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CustomerServiceImplService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:9090/CustomerServicePort?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CustomerServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CustomerServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CustomerServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public CustomerServiceImplService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CustomerServiceImplService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CustomerServiceImplService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns CustomerService
     */
    @WebEndpoint(name = "CustomerServiceImplPort")
    public CustomerService getCustomerServiceImplPort() {
        return super.getPort(CustomerServiceImplPort, CustomerService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CustomerService
     */
    @WebEndpoint(name = "CustomerServiceImplPort")
    public CustomerService getCustomerServiceImplPort(WebServiceFeature... features) {
        return super.getPort(CustomerServiceImplPort, CustomerService.class, features);
    }

}
